[tool.poetry]
package-mode = false
name = "JGLUE-evaluation-scripts"
version = "0.1.0"
description = ""
authors = ["nobu-g <ueda-n127@hotmail.co.jp>"]
maintainers = ["nobu-g <ueda-n127@hotmail.co.jp>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.9"
torch = ">=2.1.1"
transformers = { version = "~4.41.2", extras = ["sentencepiece"] }
tokenizers = "^0.19.1"
lightning = "~2.3.2"
torchmetrics = "^1.1"
omegaconf = "^2.3"
hydra-core = "^1.3"
rich = "^13.3"
datasets = "^2.10"
rhoknp = "^1.4"
jaconv = "^0.3.4"
mecab-python3 = { version = "^1.0", optional = true }

[tool.poetry.group.dev.dependencies]
ipdb = "^0.13.9"
types-attrs = "^19.1"
wandb = "^0.17.0"
tabulate = "^0.9.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.0"

[tool.poetry.extras]
mecab = ["mecab-python3"]

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py39"  # The minimum Python version to target
src = ["src"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "E501", # Line too long
    "RUF001", # String contains ambiguous `ノ` (KATAKANA LETTER NO). Did you mean `/` (SOLIDUS)?
    "RUF002", # Docstring contains ambiguous `，` (FULLWIDTH COMMA). Did you mean `,` (COMMA)?
    "COM812", # Trailing comma missing
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "PLR2004", # Magic value used in comparison
    "D",  # pydocstyle
    "FA100",  # Missing `from __future__ import annotations`, but uses `...`
    "S101",  # Use of `assert` detected
    "TRY003",  # Avoid specifying long messages outside the exception class
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in `...`
    "C408",  # Unnecessary `dict` call (rewrite as a literal)
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "ERA001",  # Found commented-out code
    "EM102",  # Exception must not use an f-string literal, assign to variable first
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "ANN",  # flake8-annotations
    "INP001",  # File `...` is part of an implicit namespace package. Add an `__init__.py`.
]
"scripts/gen_table.py" = [
    "T201",  # `print` found
    "INP001",  # File `...` is part of an implicit namespace package. Add an `__init__.py`.
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.black]
line-length = 120
target-version = ["py39", "py310", "py311", "py312"]

[tool.mypy]
python_version = 3.9

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
    # note the use of single quote below to denote "raw" strings in TOML
    'ignore::UserWarning',
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
